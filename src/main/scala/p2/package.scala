import scalismo.mesh.TriangleMesh
import scalismo.sampling.loggers.AcceptRejectLogger
import scalismo.sampling.{DistributionEvaluator, ProposalGenerator}
import scalismo.statisticalmodel.asm.{ActiveShapeModel, PreprocessedImage}


package object p2 {
  var countAccepted = 0
  var countRejected = 0

  val logger = new AcceptRejectLogger[ShapeParameters] {
    override def accept(current: ShapeParameters, sample: ShapeParameters, generator: ProposalGenerator[ShapeParameters], evaluator: DistributionEvaluator[ShapeParameters]): Unit = {
      println(s"Accepted proposal generated by $generator (probability ${evaluator.logValue(sample)})")
      //println(s"${evaluator.logValue(sample)-evaluator.logValue(current)}")
      countAccepted += 1
    }

    override def reject(current: ShapeParameters, sample: ShapeParameters, generator: ProposalGenerator[ShapeParameters], evaluator: DistributionEvaluator[ShapeParameters]): Unit = {
      println(s"Rejected proposal generated by $generator (probability ${evaluator.logValue(sample)})")
      //println(s"${evaluator.logValue(sample)-evaluator.logValue(current)}")

      countRejected += 1
    }
  }

  def likelihoodForMesh(asm: ActiveShapeModel, mesh: TriangleMesh, preprocessedImage: PreprocessedImage): Double = {

    val ids = asm.profiles.ids

    val likelihoods = for (id <- ids) yield {
      val profile = asm.profiles(id)
      val profilePointOnMesh = mesh.point(profile.pointId)
      val featureAtPoint = asm.featureExtractor(preprocessedImage, profilePointOnMesh, mesh, profile.pointId).get
      profile.distribution.logpdf(featureAtPoint)
    }
    likelihoods.sum
  }

}
